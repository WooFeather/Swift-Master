//
//  MovieChartViewController.swift
//  NetworkingProject
//
//  Created by Ï°∞Ïö∞ÌòÑ on 1/14/25.
//

import UIKit
import SnapKit
import Alamofire

class MovieChartViewController: UIViewController {
    
    lazy var backgroundImage = {
        let img = UIImageView()
        img.image = .film
        img.contentMode = .scaleAspectFill
        return img
    }()
    
    lazy var dimmingView = {
        let view = UIImageView()
        view.backgroundColor = .black
        view.layer.opacity = 0.7
        return view
    }()
    
    lazy var searchTextField = {
        let txt = UITextField()
        txt.placeholder = "ÏùºÏûêÎ•º Í≤ÄÏÉâÌïòÏÑ∏Ïöî(YYYYMMDD)"
        txt.keyboardType = .numberPad
        txt.textColor = .white
        txt.setColor(.systemGray3)
        txt.borderStyle = .none
        txt.addTarget(self, action: #selector(textFieldDidEndOnExit), for: .editingDidEndOnExit)
        return txt
    }()
    
    lazy var textFieldBottomLine = {
        let view = UIView()
        view.backgroundColor = .white
        return view
    }()
    
    lazy var searchButton = {
        let btn = UIButton()
        btn.setTitle("Í≤ÄÏÉâ", for: .normal)
        btn.setTitleColor(.black, for: .normal)
        btn.backgroundColor = .white
        btn.addTarget(self, action: #selector(searchButtonTapped), for: .touchUpInside)
        return btn
    }()
    
    let movieTableView = UITableView()
    
    static let apiKey = "04b35f8603fa63738f28b50e8ae94a4d"
    lazy var searchDate: String = dateCalculate()
    var rowCount = 10

    override func viewDidLoad() {
        super.viewDidLoad()
        
        backgroundImageConfig()
        searchTextFieldConfig()
        searchButtonConfig()
        movieTableViewConfig()
        print("Ïñ¥Ï†ú ÎÇ†Ïßú: \(searchDate)")
    }
    
    @objc
    func searchButtonTapped() {
        guard let text = searchTextField.text else { return }
        
        if let dateNum = Int(text) {
            if dateNum < 20050101 || dateNum >= Int(Date().toString()) ?? 20300000 {
                showAlert(title: "ÎÇ†ÏßúÎ•º Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöîüò≠", message: "20050101 Ïù¥ÌõÑÎ∂ÄÌÑ∞ Ïñ¥Ï†ú ÎÇ†ÏßúÍπåÏßÄ Í≤ÄÏÉâÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§.")
                searchTextField.text = ""
            } else {
                searchDate = text
                movieTableView.reloadData()
            }
        } else {
            showAlert(title: "Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöîüò≠", message: "Ïà´ÏûêÍ∞Ä ÏïÑÎãå Î¨∏ÏûêÎÇò Í≥µÎ∞±ÏùÄ ÏûÖÎ†•Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")
            searchTextField.text = ""
        }
        // Ïù¥ÏÉÅÌïú ÎÇ†ÏßúÏùºÎïå(ex. 20059984)ÎèÑ Ï≤òÎ¶¨Ìï¥Ï§òÏïº Ìï®..
        // StringÏúºÎ°ú Ìï¥ÏÑú Í∞Å Ïù∏Îç±Ïä§Ïóê Ï°∞Í±¥ÏùÑ Îã¨ÏïÑÏ§òÏïºÌïòÎÇò..
        // ÎãπÏó∞Ìûà Î¨∏ÏûêÏó¥Ïùò Ïà´Ïûê ÌÅ¨Í∏∞ÎπÑÍµêÎäî ÏïàÎêòÍ≥†, IntÏùò indexÎ•º ÏïåÏßÄÎèÑ Î™®Îã§Îãà.. Ï¢ÄÎçî ÏïåÏïÑÎ¥êÏïº Ìï†ÎìØ
//        if text[0] != 2 || text[1] != 0 || text[2] > 2 || text[4] > 2 || text[6] > 3 {
//            showAlert(title: "ÎÇ†ÏßúÎ•º Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöîüò≠", message: "20050101 Ïù¥ÌõÑÎ∂ÄÌÑ∞ Ïñ¥Ï†ú ÎÇ†ÏßúÍπåÏßÄ Í≤ÄÏÉâÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§.")
//            searchTextField.text = ""
//        } else {
//            searchDate = text
//            movieTableView.reloadData()
//        }
        view.endEditing(true)
    }
    
    @objc
    func textFieldDidEndOnExit() {
        view.endEditing(true)
    }
    
    func dateCalculate() -> String {
        let now = Date()
        let calendar = Calendar.current
        
        let day = DateComponents(day: -1)
        if let yesterday = calendar.date(byAdding: day, to: now) {
            let dateString = yesterday.toString()
            return dateString
        }
        return ""
    }

    func backgroundImageConfig() {
        view.addSubview(backgroundImage)
        view.addSubview(dimmingView)
        
        [backgroundImage, dimmingView].forEach {
            $0.snp.makeConstraints { make in
                make.edges.equalToSuperview()
            }
        }
    }
    
    func searchTextFieldConfig() {
        view.addSubview(searchTextField)
        view.addSubview(textFieldBottomLine)
        
        searchTextField.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide).offset(24)
            make.leading.equalTo(view).offset(24)
            make.width.equalTo(250)
        }
        
        textFieldBottomLine.snp.makeConstraints { make in
            make.top.equalTo(searchTextField.snp.bottom).offset(8)
            make.leading.equalTo(view).offset(24)
            make.width.equalTo(250)
            make.height.equalTo(3)
        }
    }
    
    func searchButtonConfig() {
        view.addSubview(searchButton)
        
        searchButton.snp.makeConstraints { make in
            make.centerY.equalTo(searchTextField.snp.centerY)
            make.leading.equalTo(searchTextField.snp.trailing).offset(12)
            make.trailing.equalTo(view).offset(-24)
            make.height.equalTo(50)
        }
    }
    
    func movieTableViewConfig() {
        view.addSubview(movieTableView)
        
        movieTableView.backgroundColor = .clear
        
        movieTableView.snp.makeConstraints { make in
            make.top.equalTo(textFieldBottomLine.snp.bottom).offset(12)
            make.bottom.horizontalEdges.equalToSuperview()
        }
        
        movieTableView.delegate = self
        movieTableView.dataSource = self
        movieTableView.register(MovieChartTableViewCell.self, forCellReuseIdentifier: MovieChartTableViewCell.identifier)
    }
    
    // rowNumÏùÑ Í≥ÑÏÇ∞Ìï¥Ï£ºÍ∏∞ ÏúÑÌïú Ìï®Ïàò
//    func countRowNum() {
//        let url = "https://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=04b35f8603fa63738f28b50e8ae94a4d&targetDt=\(searchDate)"
//        AF.request(url, method: .get).responseDecodable(of: BoxOffice.self) { [self] response in
//            switch response.result {
//            case .success(let value):
//                rowCount = value.boxOfficeResult.dailyBoxOfficeList.count
//                print("ÏÉàÎ°ú Í≥ÑÏÇ∞Îêú rowNum\(rowCount)")
//            case .failure(let error):
//                print(error)
//            }
//        }
//    }
    
    // ÎÑ§Ìä∏ÏõåÌÇπ ÌôïÏù∏ÏùÑ ÏúÑÌïú Ìï®Ïàò
//    func networking() {
//        let url = "https://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=04b35f8603fa63738f28b50e8ae94a4d&targetDt=\(searchDate)"
//        AF.request(url, method: .get).responseString { response in
//            dump(response)
//        }
//    }
}

extension MovieChartViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // Í≤ÄÏÉâÎ≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥, ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏïÑÏò® Îç∞Ïù¥ÌÑ∞Ïùò Í∞úÏàòÎßåÌÅº ÏÉùÏÑ±ÌïòÎ†§ÌñàÎäîÎç∞, ÏñòÍ∞Ä Î®ºÏ†Ä Ïã§ÌñâÏù¥ÎêòÏÑú Ïã§Ìå®..
        // ÏïÑÎßà ÎπÑÎèôÍ∏∞Ï≤òÎ¶¨Î•º Ìï¥ÏïºÎê†ÎìØ..?
        // ÏùºÎã® ÏûÖÎ†• ÏòàÏô∏Ï≤òÎ¶¨Î•º ÌÜµÌï¥ Ïù∏Îç±Ïä§Í∞Ä rownumÏù¥ 10Î≥¥Îã§ ÎÇÆÏùÄ Îç∞Ïù¥ÌÑ∞Ïóê Ï†ëÍ∑ºÌïòÏßÄ Î™ªÌïòÍ≤å Ìï¥ÎÜ®ÏäµÎãàÎã§.
        return rowCount
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        print(#function)
        let cell = movieTableView.dequeueReusableCell(withIdentifier: MovieChartTableViewCell.identifier, for: indexPath) as! MovieChartTableViewCell
        let url = "https://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=04b35f8603fa63738f28b50e8ae94a4d&targetDt=\(searchDate)"
        AF.request(url, method: .get).responseDecodable(of: BoxOffice.self) { response in
            switch response.result {
            case .success(let value):
                let row = value.boxOfficeResult.dailyBoxOfficeList[indexPath.row]
                cell.configureData(row: row)
            case .failure(let error):
                print(error)
            }
        }
        
        cell.backgroundColor = .clear
        
        return cell
    }
}
